NGame = {
}

NJominiMap = {
}

NAI = {
	STRATEGY_RANDOM_FACTOR = 10.0
	CHANGE_STRATEGY_INCREASE_WEEKLY_CHANCE = 40.0
	CHANGE_STRATEGY_DIPLOMATIC_STATE_GAINED = 15
	CHANGE_STRATEGY_DIPLOMATIC_STATE_LOST = 15
	COUNTRY_GOAL_STRATEGIC_UPDATE_COUNT = 10
	COUNTRY_GOAL_ADJUSTMENT_UPDATE_COUNT = 75
	BASE_AGGRESSION = 0.6
	DIPLO_PROPOSAL_TO_PLAYER_COOLDOWN_MONTHS = 60
	DIPLO_PROPOSAL_LIKELY_NON_ACCEPTED_COOLDOWN_MONTHS = 60
	RECRUITABLE_COMMANDER_RANDOM_FACTOR = 1.5
	START_DIPLO_PLAY_RANDOM_FACTOR = 1.2
	WAR_GOAL_RANDOM_FACTOR = 1.5
	TECH_RANDOM_FACTOR = 1.5
	TECH_REMAINING_COST_FACTOR = 0.03
	DEFEND_STATE_CAPITAL_WEIGHT = 50
	INVADE_STATE_CAPITAL_WEIGHT = 50
	NAVAL_INVASION_COOLDOWN_DAYS = 30
	FRONT_IMPORTANCE_MIN_SCORE = 40
	COLONY_ARABLE_LAND_WEIGHT = 15
	COLONY_ADJACENT_WEIGHT_MULT = 20
	COLONY_RANDOM_FACTOR = 1.5
	MONEY_SPENDING_RANDOM_FACTOR = 1.5
	PRODUCTION_BUILDING_RANDOM_FACTOR = 5
	VIOLATE_SOVEREIGNTY_RANDOM_FACTOR = 1.5
	
	MONEY_SPENDING_SUPPLY_NETWORK_DESIRED_THRESHOLD = 1.1 # If supply network is worse than this, AI wants to improve it

	MONEY_SPENDING_WANTED_CONVOYS_PER_BARRACKS_LEVEL = 4 # If the AI has fewer free convoys than this per level of barracks, it wants more ports
	MONEY_SPENDING_BUREAUCRACY_CRITICAL_THRESHOLD = 0.95 # If bureaucracy income to expenses is worse than this, AI considers it critical to improve it
	MONEY_SPENDING_BUREAUCRACY_DESIRED_THRESHOLD = 1.08 # If bureaucracy income to expenses is worse than this, AI wants to improve it
	MONEY_SPENDING_BUREAUCRACY_EXCESSIVE_THRESHOLD = 1.16 # If bureaucracy income to expenses is better than this, AI will not improve it
	MONEY_SPENDING_INFRASTRUCTURE_CRITICAL_THRESHOLD = 0.85 # If infra production to usage is worse than this, AI considers it critical to improve it
	MONEY_SPENDING_INFRASTRUCTURE_DESIRED_THRESHOLD = 1.15 # If infra production to usage is worse than this, AI wants to improve it
	
	# Below data is used for naval invasions:
	NAVAL_INVASION_RANDOM_FACTOR = 0.35 								# The higher this is, the more random AI naval invasion theater selection will be
	NAVAL_INVASION_COOLDOWN_DAYS = 30 								# After launching a naval invasion, the AI will wait at least this long before launching another
	NAVAL_INVASION_MIN_SCORE = 20									# AI won't bother launching naval invasions against theaters with a lower total state score than this
	NAVAL_INVASION_MAX_LOCAL_FRONT_SCORE = 200						# Don't launch a naval invasion if there is a local front of at least this total score for the general
}

NCountry = {
	COUNTRY_FORMATION_CANDIDATE_MIN_RANK = 2
}

NPolitics = {
	LEADER_IDEOLOGY_RANDOM_FACTOR = 1.5
	POP_IG_RANDOM_FACTOR = 0.3
	MAX_POP_FRACTION_LEAVE_IG = 0.1
	
	SECESSION_WEEKLY_CHANCE_EXCESS_DIV = 50			# Excess turmoil is divided by this and used to increase chance for secession movements
}

NEconomy = {
} 

NMilitary = {
	MANPOWER_LOST_DUE_TO_ATTRITION_PER_WEEK_MIN = 0.0005
	MAPOWER_LOST_DUE_TO_ATTRITION_PER_WEEK_MAX = 0.005
}

NDiplomacy = {
	WAR_GOAL_INFAMY_CONQUER_STATE = 6.0
	WAR_GOAL_INFAMY_RETURN_STATE = 1.5
	WAR_GOAL_INFAMY_TAKE_TREATY_PORT = 2.0
	WAR_GOAL_INFAMY_MAKE_PUPPET = 4.0
	WAR_GOAL_INFAMY_MAKE_VASSAL = 4.0
	WAR_GOAL_INFAMY_MAKE_DOMINION = 2.5
	WAR_GOAL_INFAMY_TRANSFER_SUBJECT = 1.5	
	WAR_GOAL_INFAMY_ANNEX_COUNTRY = 6.0
	WAR_GOAL_INFAMY_UNIFICATION = 0.5
	WAR_GOAL_INFAMY_REGIME_CHANGE = 1.0
	SWAY_OFFER_WARGOAL_MANEUVERS_COST_RETURN_STATE = 5
	
	WAR_GOAL_FORCE_RECOGNITION_ACTOR_RANK = "unrecognized_regional_power"
	
	BASE_YEARLY_INFAMY_DECAY_RATE = 4.0 	# Decay rate of infamy per year
	
	WAR_GOAL_INFAMY_POPULATION_SCALING_MULTIPLIER = 0.02 # For each WAR_GOAL_INFAMY_POPULATION_SCALING_FACTOR population in a country/state, multiply infamy by this
	WAR_GOAL_INFAMY_POPULATION_SCALING_MULTIPLIER_MAX_PER_STATE = 10 # Infamy population multiplier can't be higher than this for each state affected
	WAR_GOAL_INFAMY_POPULATION_SCALING_MULTIPLIER_MAX_TOTAL = 40 # Infamy population multiplier can't be higher than this, regardless of number of states affected
	WAR_GOAL_INFAMY_HOMELAND_FACTOR = -0.5 # Infamy is adjusted by this if the states taken/puppeted etc are Homelands of the aggressor
	WAR_GOAL_INFAMY_UNINCORPORATED_FACTOR = -0.75 # Infamy is adjusted by this if the states taken/puppeted etc are unincorporated
	WAR_GOAL_INFAMY_OWN_SUBJECT_MULT = 0.67 # Infamy is multiplied by this for wargoals targeting your own subject
}

NPops = {
    CONVERSION_RATE = 0.001						# Percentage of pops who will Convert into a different Religion each month, if eligible (halved from vanilla)
}

### Pop Growth Constants
@min_birthrate = 0.0010
@max_birthrate = 0.0050
@min_mortality = 0.0005
@max_mortality = 0.0070
@pop_growth_sol_equilibrium = 5 #was 8					# Equilibrium is where (with no birthrate/death-rate mods) growth is stagnant
@pop_growth_sol_delta_cap = 20							# SoL Delta Cap is where net growth stops increasing with rising SoL, i.e. both drop at the same pace
@pop_growth_sol_cap = 40								# SoL Cap is where they birthrate/death-rate stop dropping

@mortality_at_equilibrium = @[max_birthrate-(pop_growth_sol_equilibrium*(max_birthrate-min_birthrate)/pop_growth_sol_cap)]
@birthrate_at_delta_cap = @[max_birthrate-(pop_growth_sol_delta_cap*(max_birthrate-min_birthrate)/pop_growth_sol_cap)]
@improving_slope = @[(birthrate_at_delta_cap-min_birthrate-min_mortality-mortality_at_equilibrium)/(pop_growth_sol_delta_cap-pop_growth_sol_equilibrium)]
@improving_intercept = @[-1*improving_slope*pop_growth_sol_equilibrium+mortality_at_equilibrium]
@mortality_at_delta_cap = @[improving_slope*pop_growth_sol_delta_cap+improving_intercept]
@fixed_delta_slope = @[(min_mortality-mortality_at_delta_cap)/(pop_growth_sol_cap-pop_growth_sol_delta_cap)]
		
NPops = {
}
### End Pop Growth Constant defines

NEvents = {
}

NTechnology = {
}

NCharacters = {
}

NCommands = {
}

NBattle = {
	CASUALTY_MAJORITY_CULTURE_WEIGHT = 1
	SURVIVAL_RATE = 0.8
	CASUALTY_ROLL_MIN = 10
	CASUALTY_ROLL_MAX = 100
	MIN_DEPENDENTS_PER_ROLL = 25
}

NWar = {
	MAX_SIMULTANEOUS_BATTLES = 2                    # Allows to spawn up to MAX_SIMULTANEOUS_BATTLES as long as you have that many generals with advance orders.
}

NText = {
}

NDebug = {
}

